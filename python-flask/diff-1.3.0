diff --git a/python-client-generated/.travis.yml b/python-client-generated/.travis.yml
new file mode 100644
index 0000000..86211e2
--- /dev/null
+++ b/python-client-generated/.travis.yml
@@ -0,0 +1,14 @@
+# ref: https://docs.travis-ci.com/user/languages/python
+language: python
+python:
+  - "2.7"
+  - "3.2"
+  - "3.3"
+  - "3.4"
+  - "3.5"
+  #- "3.5-dev" # 3.5 development branch
+  #- "nightly" # points to the latest development branch e.g. 3.6-dev
+# command to install dependencies
+install: "pip install -r requirements.txt"
+# command to run tests
+script: nosetests
diff --git a/python-client-generated/git_push.sh b/python-client-generated/git_push.sh
new file mode 100644
index 0000000..ae01b18
--- /dev/null
+++ b/python-client-generated/git_push.sh
@@ -0,0 +1,52 @@
+#!/bin/sh
+# ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
+#
+# Usage example: /bin/sh ./git_push.sh wing328 swagger-petstore-perl "minor update"
+
+git_user_id=$1
+git_repo_id=$2
+release_note=$3
+
+if [ "$git_user_id" = "" ]; then
+    git_user_id="GIT_USER_ID"
+    echo "[INFO] No command line input provided. Set \$git_user_id to $git_user_id"
+fi
+
+if [ "$git_repo_id" = "" ]; then
+    git_repo_id="GIT_REPO_ID"
+    echo "[INFO] No command line input provided. Set \$git_repo_id to $git_repo_id"
+fi
+
+if [ "$release_note" = "" ]; then
+    release_note="Minor update"
+    echo "[INFO] No command line input provided. Set \$release_note to $release_note"
+fi
+
+# Initialize the local directory as a Git repository
+git init
+
+# Adds the files in the local repository and stages them for commit.
+git add .
+
+# Commits the tracked changes and prepares them to be pushed to a remote repository. 
+git commit -m "$release_note"
+
+# Sets the new remote
+git_remote=`git remote`
+if [ "$git_remote" = "" ]; then # git remote not defined
+
+    if [ "$GIT_TOKEN" = "" ]; then
+        echo "[INFO] \$GIT_TOKEN (environment variable) is not set. Using the git credential in your environment."
+        git remote add origin https://github.com/${git_user_id}/${git_repo_id}.git
+    else
+        git remote add origin https://${git_user_id}:${GIT_TOKEN}@github.com/${git_user_id}/${git_repo_id}.git
+    fi
+
+fi
+
+git pull origin master
+
+# Pushes (Forces) the changes in the local repository up to the remote repository
+echo "Git pushing to https://github.com/${git_user_id}/${git_repo_id}.git"
+git push origin master 2>&1 | grep -v 'To https'
+
diff --git a/python-client-generated/test-requirements.txt b/python-client-generated/test-requirements.txt
new file mode 100644
index 0000000..2702246
--- /dev/null
+++ b/python-client-generated/test-requirements.txt
@@ -0,0 +1,5 @@
+coverage>=4.0.3
+nose>=1.3.7
+pluggy>=0.3.1
+py>=1.4.31
+randomize>=0.13
diff --git a/python-client-generated/test/__init__.py b/python-client-generated/test/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/python-client-generated/test/test_host.py b/python-client-generated/test/test_host.py
new file mode 100644
index 0000000..b7a5f49
--- /dev/null
+++ b/python-client-generated/test/test_host.py
@@ -0,0 +1,39 @@
+# coding: utf-8
+
+"""
+    PICKY: Python ICinga2 to KeYbase
+
+    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
+
+    OpenAPI spec version: 1.1.0
+    
+    Generated by: https://github.com/swagger-api/swagger-codegen.git
+"""
+
+from __future__ import absolute_import
+
+import unittest
+
+import swagger_client
+from models.host import Host  # noqa: E501
+from swagger_client.rest import ApiException
+
+
+class TestHost(unittest.TestCase):
+    """Host unit test stubs"""
+
+    def setUp(self):
+        pass
+
+    def tearDown(self):
+        pass
+
+    def testHost(self):
+        """Test Host"""
+        # FIXME: construct object with mandatory attributes with example values
+        # model = swagger_client.models.host.Host()  # noqa: E501
+        pass
+
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/python-client-generated/test/test_hosts_api.py b/python-client-generated/test/test_hosts_api.py
new file mode 100644
index 0000000..6157df4
--- /dev/null
+++ b/python-client-generated/test/test_hosts_api.py
@@ -0,0 +1,75 @@
+# coding: utf-8
+
+"""
+    PICKY: Python ICinga2 to KeYbase
+
+    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
+
+    OpenAPI spec version: 1.1.0
+    
+    Generated by: https://github.com/swagger-api/swagger-codegen.git
+"""
+
+from __future__ import absolute_import
+
+import unittest
+
+import swagger_client
+from api.hosts_api import HostsApi  # noqa: E501
+from swagger_client.rest import ApiException
+
+
+class TestHostsApi(unittest.TestCase):
+    """HostsApi unit test stubs"""
+
+    def setUp(self):
+        self.api = api.hosts_api.HostsApi()  # noqa: E501
+
+    def tearDown(self):
+        pass
+
+    def test_hosts_create(self):
+        """Test case for hosts_create
+
+        Create a host and add it to the hosts list  # noqa: E501
+        """
+        pass
+
+    def test_hosts_delete(self):
+        """Test case for hosts_delete
+
+        Delete a host from the hosts list  # noqa: E501
+        """
+        pass
+
+    def test_hosts_patch(self):
+        """Test case for hosts_patch
+
+        Rebuild the services list of a host  # noqa: E501
+        """
+        pass
+
+    def test_hosts_read_all(self):
+        """Test case for hosts_read_all
+
+        Read the entire hosts list  # noqa: E501
+        """
+        pass
+
+    def test_hosts_read_one(self):
+        """Test case for hosts_read_one
+
+        Read one host from the hosts list  # noqa: E501
+        """
+        pass
+
+    def test_hosts_update(self):
+        """Test case for hosts_update
+
+        Update a host in the hosts list  # noqa: E501
+        """
+        pass
+
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/python-client-generated/test/test_service.py b/python-client-generated/test/test_service.py
new file mode 100644
index 0000000..0fa617f
--- /dev/null
+++ b/python-client-generated/test/test_service.py
@@ -0,0 +1,39 @@
+# coding: utf-8
+
+"""
+    PICKY: Python ICinga2 to KeYbase
+
+    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
+
+    OpenAPI spec version: 1.1.0
+    
+    Generated by: https://github.com/swagger-api/swagger-codegen.git
+"""
+
+from __future__ import absolute_import
+
+import unittest
+
+import swagger_client
+from models.service import Service  # noqa: E501
+from swagger_client.rest import ApiException
+
+
+class TestService(unittest.TestCase):
+    """Service unit test stubs"""
+
+    def setUp(self):
+        pass
+
+    def tearDown(self):
+        pass
+
+    def testService(self):
+        """Test Service"""
+        # FIXME: construct object with mandatory attributes with example values
+        # model = swagger_client.models.service.Service()  # noqa: E501
+        pass
+
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/python-client-generated/test/test_services_api.py b/python-client-generated/test/test_services_api.py
new file mode 100644
index 0000000..9ba4075
--- /dev/null
+++ b/python-client-generated/test/test_services_api.py
@@ -0,0 +1,68 @@
+# coding: utf-8
+
+"""
+    PICKY: Python ICinga2 to KeYbase
+
+    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
+
+    OpenAPI spec version: 1.1.0
+    
+    Generated by: https://github.com/swagger-api/swagger-codegen.git
+"""
+
+from __future__ import absolute_import
+
+import unittest
+
+import swagger_client
+from api.services_api import ServicesApi  # noqa: E501
+from swagger_client.rest import ApiException
+
+
+class TestServicesApi(unittest.TestCase):
+    """ServicesApi unit test stubs"""
+
+    def setUp(self):
+        self.api = api.services_api.ServicesApi()  # noqa: E501
+
+    def tearDown(self):
+        pass
+
+    def test_services_create(self):
+        """Test case for services_create
+
+        Create a service and add it to the services list  # noqa: E501
+        """
+        pass
+
+    def test_services_delete(self):
+        """Test case for services_delete
+
+        Delete a service from the services list  # noqa: E501
+        """
+        pass
+
+    def test_services_read_all(self):
+        """Test case for services_read_all
+
+        Read the entire services list  # noqa: E501
+        """
+        pass
+
+    def test_services_read_one(self):
+        """Test case for services_read_one
+
+        Read one service from the services list  # noqa: E501
+        """
+        pass
+
+    def test_services_update(self):
+        """Test case for services_update
+
+        Update a service in the services list  # noqa: E501
+        """
+        pass
+
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/python-client-generated/tox.ini b/python-client-generated/tox.ini
new file mode 100644
index 0000000..3d0be61
--- /dev/null
+++ b/python-client-generated/tox.ini
@@ -0,0 +1,10 @@
+[tox]
+envlist = py27, py3
+
+[testenv]
+deps=-r{toxinidir}/requirements.txt
+     -r{toxinidir}/test-requirements.txt
+
+commands=
+   nosetests \
+      []
diff --git a/python-flask/.gitignore b/python-flask/.gitignore
index a655050..a798948 100644
--- a/python-flask/.gitignore
+++ b/python-flask/.gitignore
@@ -10,6 +10,7 @@ __pycache__/
 .Python
 env/
 build/
+data/
 develop-eggs/
 dist/
 downloads/
diff --git a/python-flask/Dockerfile b/python-flask/Dockerfile
index f9243a5..0cff76e 100644
--- a/python-flask/Dockerfile
+++ b/python-flask/Dockerfile
@@ -1,4 +1,4 @@
-FROM python:3.6-alpine
+FROM keybaseio/client:stable-python-slim
 
 RUN mkdir -p /usr/src/app
 WORKDIR /usr/src/app
@@ -6,11 +6,16 @@ WORKDIR /usr/src/app
 COPY requirements.txt /usr/src/app/
 
 RUN pip3 install --no-cache-dir -r requirements.txt
+RUN pip3 install connexion[swagger-ui]
 
 COPY . /usr/src/app
 
+COPY ./defaults /data
+VOLUME /data
+
 EXPOSE 8080
 
-ENTRYPOINT ["python3"]
+COPY entrypoint.sh /usr/bin/entrypoint.sh
 
-CMD ["-m", "swagger_server"]
\ No newline at end of file
+# uses tini's entrypoint
+CMD ["sh", "-x", "startup.sh" ]
diff --git a/python-flask/diff-1.3.0 b/python-flask/diff-1.3.0
new file mode 100644
index 0000000..be61c9e
--- /dev/null
+++ b/python-flask/diff-1.3.0
@@ -0,0 +1,310 @@
+diff --git a/python-client-generated/.travis.yml b/python-client-generated/.travis.yml
+new file mode 100644
+index 0000000..86211e2
+--- /dev/null
++++ b/python-client-generated/.travis.yml
+@@ -0,0 +1,14 @@
++# ref: https://docs.travis-ci.com/user/languages/python
++language: python
++python:
++  - "2.7"
++  - "3.2"
++  - "3.3"
++  - "3.4"
++  - "3.5"
++  #- "3.5-dev" # 3.5 development branch
++  #- "nightly" # points to the latest development branch e.g. 3.6-dev
++# command to install dependencies
++install: "pip install -r requirements.txt"
++# command to run tests
++script: nosetests
+diff --git a/python-client-generated/git_push.sh b/python-client-generated/git_push.sh
+new file mode 100644
+index 0000000..ae01b18
+--- /dev/null
++++ b/python-client-generated/git_push.sh
+@@ -0,0 +1,52 @@
++#!/bin/sh
++# ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
++#
++# Usage example: /bin/sh ./git_push.sh wing328 swagger-petstore-perl "minor update"
++
++git_user_id=$1
++git_repo_id=$2
++release_note=$3
++
++if [ "$git_user_id" = "" ]; then
++    git_user_id="GIT_USER_ID"
++    echo "[INFO] No command line input provided. Set \$git_user_id to $git_user_id"
++fi
++
++if [ "$git_repo_id" = "" ]; then
++    git_repo_id="GIT_REPO_ID"
++    echo "[INFO] No command line input provided. Set \$git_repo_id to $git_repo_id"
++fi
++
++if [ "$release_note" = "" ]; then
++    release_note="Minor update"
++    echo "[INFO] No command line input provided. Set \$release_note to $release_note"
++fi
++
++# Initialize the local directory as a Git repository
++git init
++
++# Adds the files in the local repository and stages them for commit.
++git add .
++
++# Commits the tracked changes and prepares them to be pushed to a remote repository. 
++git commit -m "$release_note"
++
++# Sets the new remote
++git_remote=`git remote`
++if [ "$git_remote" = "" ]; then # git remote not defined
++
++    if [ "$GIT_TOKEN" = "" ]; then
++        echo "[INFO] \$GIT_TOKEN (environment variable) is not set. Using the git credential in your environment."
++        git remote add origin https://github.com/${git_user_id}/${git_repo_id}.git
++    else
++        git remote add origin https://${git_user_id}:${GIT_TOKEN}@github.com/${git_user_id}/${git_repo_id}.git
++    fi
++
++fi
++
++git pull origin master
++
++# Pushes (Forces) the changes in the local repository up to the remote repository
++echo "Git pushing to https://github.com/${git_user_id}/${git_repo_id}.git"
++git push origin master 2>&1 | grep -v 'To https'
++
+diff --git a/python-client-generated/test-requirements.txt b/python-client-generated/test-requirements.txt
+new file mode 100644
+index 0000000..2702246
+--- /dev/null
++++ b/python-client-generated/test-requirements.txt
+@@ -0,0 +1,5 @@
++coverage>=4.0.3
++nose>=1.3.7
++pluggy>=0.3.1
++py>=1.4.31
++randomize>=0.13
+diff --git a/python-client-generated/test/__init__.py b/python-client-generated/test/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/python-client-generated/test/test_host.py b/python-client-generated/test/test_host.py
+new file mode 100644
+index 0000000..b7a5f49
+--- /dev/null
++++ b/python-client-generated/test/test_host.py
+@@ -0,0 +1,39 @@
++# coding: utf-8
++
++"""
++    PICKY: Python ICinga2 to KeYbase
++
++    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
++
++    OpenAPI spec version: 1.1.0
++    
++    Generated by: https://github.com/swagger-api/swagger-codegen.git
++"""
++
++from __future__ import absolute_import
++
++import unittest
++
++import swagger_client
++from models.host import Host  # noqa: E501
++from swagger_client.rest import ApiException
++
++
++class TestHost(unittest.TestCase):
++    """Host unit test stubs"""
++
++    def setUp(self):
++        pass
++
++    def tearDown(self):
++        pass
++
++    def testHost(self):
++        """Test Host"""
++        # FIXME: construct object with mandatory attributes with example values
++        # model = swagger_client.models.host.Host()  # noqa: E501
++        pass
++
++
++if __name__ == '__main__':
++    unittest.main()
+diff --git a/python-client-generated/test/test_hosts_api.py b/python-client-generated/test/test_hosts_api.py
+new file mode 100644
+index 0000000..6157df4
+--- /dev/null
++++ b/python-client-generated/test/test_hosts_api.py
+@@ -0,0 +1,75 @@
++# coding: utf-8
++
++"""
++    PICKY: Python ICinga2 to KeYbase
++
++    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
++
++    OpenAPI spec version: 1.1.0
++    
++    Generated by: https://github.com/swagger-api/swagger-codegen.git
++"""
++
++from __future__ import absolute_import
++
++import unittest
++
++import swagger_client
++from api.hosts_api import HostsApi  # noqa: E501
++from swagger_client.rest import ApiException
++
++
++class TestHostsApi(unittest.TestCase):
++    """HostsApi unit test stubs"""
++
++    def setUp(self):
++        self.api = api.hosts_api.HostsApi()  # noqa: E501
++
++    def tearDown(self):
++        pass
++
++    def test_hosts_create(self):
++        """Test case for hosts_create
++
++        Create a host and add it to the hosts list  # noqa: E501
++        """
++        pass
++
++    def test_hosts_delete(self):
++        """Test case for hosts_delete
++
++        Delete a host from the hosts list  # noqa: E501
++        """
++        pass
++
++    def test_hosts_patch(self):
++        """Test case for hosts_patch
++
++        Rebuild the services list of a host  # noqa: E501
++        """
++        pass
++
++    def test_hosts_read_all(self):
++        """Test case for hosts_read_all
++
++        Read the entire hosts list  # noqa: E501
++        """
++        pass
++
++    def test_hosts_read_one(self):
++        """Test case for hosts_read_one
++
++        Read one host from the hosts list  # noqa: E501
++        """
++        pass
++
++    def test_hosts_update(self):
++        """Test case for hosts_update
++
++        Update a host in the hosts list  # noqa: E501
++        """
++        pass
++
++
++if __name__ == '__main__':
++    unittest.main()
+diff --git a/python-client-generated/test/test_service.py b/python-client-generated/test/test_service.py
+new file mode 100644
+index 0000000..0fa617f
+--- /dev/null
++++ b/python-client-generated/test/test_service.py
+@@ -0,0 +1,39 @@
++# coding: utf-8
++
++"""
++    PICKY: Python ICinga2 to KeYbase
++
++    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
++
++    OpenAPI spec version: 1.1.0
++    
++    Generated by: https://github.com/swagger-api/swagger-codegen.git
++"""
++
++from __future__ import absolute_import
++
++import unittest
++
++import swagger_client
++from models.service import Service  # noqa: E501
++from swagger_client.rest import ApiException
++
++
++class TestService(unittest.TestCase):
++    """Service unit test stubs"""
++
++    def setUp(self):
++        pass
++
++    def tearDown(self):
++        pass
++
++    def testService(self):
++        """Test Service"""
++        # FIXME: construct object with mandatory attributes with example values
++        # model = swagger_client.models.service.Service()  # noqa: E501
++        pass
++
++
++if __name__ == '__main__':
++    unittest.main()
+diff --git a/python-client-generated/test/test_services_api.py b/python-client-generated/test/test_services_api.py
+new file mode 100644
+index 0000000..9ba4075
+--- /dev/null
++++ b/python-client-generated/test/test_services_api.py
+@@ -0,0 +1,68 @@
++# coding: utf-8
++
++"""
++    PICKY: Python ICinga2 to KeYbase
++
++    A Bridge between Icinga2's Notifications and Keybase  # noqa: E501
++
++    OpenAPI spec version: 1.1.0
++    
++    Generated by: https://github.com/swagger-api/swagger-codegen.git
++"""
++
++from __future__ import absolute_import
++
++import unittest
++
++import swagger_client
++from api.services_api import ServicesApi  # noqa: E501
++from swagger_client.rest import ApiException
++
++
++class TestServicesApi(unittest.TestCase):
++    """ServicesApi unit test stubs"""
++
++    def setUp(self):
++        self.api = api.services_api.ServicesApi()  # noqa: E501
++
++    def tearDown(self):
++        pass
++
++    def test_services_create(self):
++        """Test case for services_create
++
++        Create a service and add it to the services list  # noqa: E501
++        """
++        pass
++
++    def test_services_delete(self):
++        """Test case for services_delete
++
++        D
\ No newline at end of file
diff --git a/python-flask/requirements.txt b/python-flask/requirements.txt
index b5bc506..77a03bd 100644
--- a/python-flask/requirements.txt
+++ b/python-flask/requirements.txt
@@ -1,3 +1,5 @@
-connexion == 2.2.0
+connexion >= 2.7.0
 python_dateutil == 2.6.0
 setuptools >= 21.0.0
+pykeybasebot
+pyyaml
diff --git a/python-flask/swagger_server/__main__.py b/python-flask/swagger_server/__main__.py
index 87a9b67..0a0f182 100644
--- a/python-flask/swagger_server/__main__.py
+++ b/python-flask/swagger_server/__main__.py
@@ -3,10 +3,12 @@
 import connexion
 
 from swagger_server import encoder
+from swagger_server.data import CONFIG
 
 
 def main():
     app = connexion.App(__name__, specification_dir='./swagger/')
+    app.app.config.update(CONFIG['flask'])
     app.app.json_encoder = encoder.JSONEncoder
     app.add_api('swagger.yaml', arguments={'title': 'PICKY: Python ICinga2 to KeYbase'}, pythonic_params=True)
     app.run(port=8080)
diff --git a/python-flask/swagger_server/controllers/hosts_controller.py b/python-flask/swagger_server/controllers/hosts_controller.py
index 1181b0c..9309d1a 100644
--- a/python-flask/swagger_server/controllers/hosts_controller.py
+++ b/python-flask/swagger_server/controllers/hosts_controller.py
@@ -1,8 +1,16 @@
+from flask import Flask
+app = Flask(__name__)
+
 import connexion
 import six
 
 from swagger_server.models.host import Host  # noqa: E501
 from swagger_server import util
+from swagger_server import data
+from flask import make_response, abort
+
+from swagger_server.data import HOSTS
+from swagger_server.sender import hosts_notify
 
 
 def hosts_create(body):  # noqa: E501
@@ -17,7 +25,16 @@ def hosts_create(body):  # noqa: E501
     """
     if connexion.request.is_json:
         body = Host.from_dict(connexion.request.get_json())  # noqa: E501
-    return 'do some magic!'
+
+    app.logger.info(f"hosts_create({body})")
+    key = f"{body.name}/{body.channel}"
+    if key not in HOSTS:
+        HOSTS[key] = body
+        hosts_notify(key)
+        return make_response(f"{body.name} in {body.channel} successfully created", 201)
+
+    else:
+        return make_response(f"Host with name {body.name} and channel {body.channel} already exists", 406)
 
 
 def hosts_delete(name, channel):  # noqa: E501
@@ -32,7 +49,17 @@ def hosts_delete(name, channel):  # noqa: E501
 
     :rtype: None
     """
-    return 'do some magic!'
+    app.logger.info(f"hosts_delete({name}, {channel})")
+    key = f"{name}/{channel}"
+
+    # Does the host to delete exist?
+    if key in HOSTS:
+        del HOSTS[key]
+        return make_response(f"{name} in {channel} successfully deleted", 200)
+
+    # Otherwise, nope, host to delete not found
+    else:
+        return make_response(f"Entry {key} not found", 404)
 
 
 def hosts_patch(name, channel):  # noqa: E501
@@ -47,6 +74,7 @@ def hosts_patch(name, channel):  # noqa: E501
 
     :rtype: None
     """
+    app.logger.info(f"hosts_patch({name}, {channel})")
     return 'do some magic!'
 
 
@@ -62,7 +90,8 @@ def hosts_read_all(length=None, offset=None):  # noqa: E501
 
     :rtype: List[Host]
     """
-    return 'do some magic!'
+    app.logger.info(f"hosts_read_all()")
+    return [HOSTS[key] for key in sorted(HOSTS.keys())]
 
 
 def hosts_read_one_host(name):  # noqa: E501
@@ -75,7 +104,8 @@ def hosts_read_one_host(name):  # noqa: E501
 
     :rtype: Host
     """
-    return 'do some magic!'
+    app.logger.info(f"hosts_read_one_host({name})")
+    return [HOSTS[key] for key in sorted(HOSTS.keys()) if key.startswith(name + '/')]
 
 
 def hosts_read_one_host_channel(name, channel):  # noqa: E501
@@ -90,7 +120,14 @@ def hosts_read_one_host_channel(name, channel):  # noqa: E501
 
     :rtype: Host
     """
-    return 'do some magic!'
+    app.logger.info(f"hosts_read_one_host_channel({name}, {channel})")
+    key = f"{name}/{channel}"
+
+    if key in HOSTS:
+        return HOSTS[key]
+
+    else:
+        return make_response(f"Host with key {key} not found", 404)
 
 
 def hosts_update(name, channel, body=None):  # noqa: E501
@@ -102,11 +139,35 @@ def hosts_update(name, channel, body=None):  # noqa: E501
     :type name: str
     :param channel: Channel being notified for this host
     :type channel: str
-    :param body: 
+    :param body:
     :type body: dict | bytes
 
     :rtype: None
     """
     if connexion.request.is_json:
         body = Host.from_dict(connexion.request.get_json())  # noqa: E501
-    return 'do some magic!'
+
+    key = f"{name}/{channel}"
+
+    if key not in HOSTS and key is not None:
+        return hosts_create(body)
+
+    host = HOSTS[key]
+
+    if body.channel:
+        body.channel = host.channel
+
+    if body.msg_id:
+        body.msg_id = host.msg_id
+
+    if body.state:
+        host.state = body.state
+
+    if body.output:
+        host.output = body.output.replace('\n', ' ')[:100]
+
+    if body.timestamp:
+        host.timestamp = body.timestamp
+
+    hosts_notify(key)
+    return make_response(f"{key} successfully updated", 201)
diff --git a/python-flask/swagger_server/data.py b/python-flask/swagger_server/data.py
index d09a0ec..93f1e4b 100644
--- a/python-flask/swagger_server/data.py
+++ b/python-flask/swagger_server/data.py
@@ -19,7 +19,7 @@ def get_timestamp():
 
 
 HOSTS = {
-    "gold!ipa1.aidoru.ch": Host.from_dict({
+    "ipa1.aidoru.ch/gold": Host.from_dict({
         "name": "ipa1.aidoru.ch",
         "channel": "gold",
         "msg_id": 0,
@@ -27,7 +27,7 @@ HOSTS = {
         "output": "CRITICAL - Host Unreachable",
         "timestamp": get_timestamp(),
     }),
-    "silver!plex.aidoru.ch": Host.from_dict({
+    "plex.aidoru.ch/silver": Host.from_dict({
         "name": "plex.aidoru.ch",
         "channel": "silver",
         "msg_id": 0,
@@ -35,7 +35,7 @@ HOSTS = {
         "output": "all good",
         "timestamp": get_timestamp(),
     }),
-    "silver!foreman.aidoru.ch": Host.from_dict({
+    "foreman.aidoru.ch/silver": Host.from_dict({
         "name": "foreman.aidoru.ch",
         "channel": "silver",
         "msg_id": 0,
diff --git a/python-flask/swagger_server/models/host.py b/python-flask/swagger_server/models/host.py
index 94d478a..36bf1f0 100644
--- a/python-flask/swagger_server/models/host.py
+++ b/python-flask/swagger_server/models/host.py
@@ -14,7 +14,7 @@ class Host(Model):
 
     Do not edit the class manually.
     """
-    def __init__(self, name: str=None, channel: str=None, msg_id: int=0, state: str='UP', output: str='', timestamp: str='now'):  # noqa: E501
+    def __init__(self, name: str=None, channel: str=None, msg_id: int=0, state: str='UP', output: str='', timestamp: str=None):  # noqa: E501
         """Host - a model defined in Swagger
 
         :param name: The name of this Host.  # noqa: E501
@@ -52,7 +52,7 @@ class Host(Model):
         self._msg_id = msg_id
         self._state = state
         self._output = output
-        self._timestamp = timestamp
+        self._timestamp = timestamp or datetime.utcnow().strftime(("%Y-%m-%d %H:%M:%SZ"))
 
     @classmethod
     def from_dict(cls, dikt) -> 'Host':
@@ -196,7 +196,7 @@ class Host(Model):
         return self._timestamp
 
     @timestamp.setter
-    def timestamp(self, timestamp: str):
+    def timestamp(self, timestamp: str=None):
         """Sets the timestamp of this Host.
 
         Last update  # noqa: E501
@@ -205,4 +205,35 @@ class Host(Model):
         :type timestamp: str
         """
 
-        self._timestamp = timestamp
+        self._timestamp = timestamp or datetime.utcnow().strftime(("%Y-%m-%d %H:%M:%SZ"))
+
+    @property
+    def all_good(self) -> bool:
+        """Tests for all states UP / OK
+
+        :rtype: bool
+        """
+        return self.state == 'UP'
+
+    @property
+    def picky(self) -> str:
+        """Returns a formatted one-liner
+        that can be chatted in keybase
+
+        :rtype: str
+        """
+        msg = ""
+
+        states = {
+            'UP': '🟩',
+            'DOWN': '🟥',
+        }
+
+        if self.state in states:
+            msg = f"{states[self.state]} {msg}"
+
+        msg = f"{msg} {self.timestamp} {self.name}"
+        if self.state == 'DOWN' and self.output is not None and self.output != "":
+            msg = msg + f"\n`{self.output}`"
+
+        return msg
diff --git a/python-flask/swagger_server/models/service.py b/python-flask/swagger_server/models/service.py
index 103c7c0..8bf6864 100644
--- a/python-flask/swagger_server/models/service.py
+++ b/python-flask/swagger_server/models/service.py
@@ -14,7 +14,7 @@ class Service(Model):
 
     Do not edit the class manually.
     """
-    def __init__(self, host: str=None, name: str=None, state: str='OK', output: str='', timestamp: str=''):  # noqa: E501
+    def __init__(self, host: str=None, name: str=None, state: str='OK', output: str='', timestamp: str=None):  # noqa: E501
         """Service - a model defined in Swagger
 
         :param host: The host of this Service.  # noqa: E501
@@ -47,7 +47,7 @@ class Service(Model):
         self._name = name
         self._state = state
         self._output = output
-        self._timestamp = timestamp
+        self._timestamp = timestamp or datetime.utcnow().strftime(("%Y-%m-%d %H:%M:%SZ"))
 
     @classmethod
     def from_dict(cls, dikt) -> 'Service':
@@ -168,7 +168,7 @@ class Service(Model):
         return self._timestamp
 
     @timestamp.setter
-    def timestamp(self, timestamp: str):
+    def timestamp(self, timestamp: str=None):
         """Sets the timestamp of this Service.
 
         Last update  # noqa: E501
@@ -177,4 +177,4 @@ class Service(Model):
         :type timestamp: str
         """
 
-        self._timestamp = timestamp
+        self._timestamp = timestamp or datetime.utcnow().strftime(("%Y-%m-%d %H:%M:%SZ"))
diff --git a/python-flask/swagger_server/util.py b/python-flask/swagger_server/util.py
index 527d142..edb2251 100644
--- a/python-flask/swagger_server/util.py
+++ b/python-flask/swagger_server/util.py
@@ -23,10 +23,10 @@ def _deserialize(data, klass):
         return deserialize_date(data)
     elif klass == datetime.datetime:
         return deserialize_datetime(data)
-    elif type(klass) == typing.GenericMeta:
-        if klass.__extra__ == list:
+    elif hasattr(klass, '__origin__'):
+        if klass.__origin__ == list:
             return _deserialize_list(data, klass.__args__[0])
-        if klass.__extra__ == dict:
+        if klass.__origin__ == dict:
             return _deserialize_dict(data, klass.__args__[1])
     else:
         return deserialize_model(data, klass)
