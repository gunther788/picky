# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Host(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, channel: str=None, msg_id: int=0, state: str='UP', output: str='', timestamp: str=None):  # noqa: E501
        """Host - a model defined in Swagger

        :param name: The name of this Host.  # noqa: E501
        :type name: str
        :param channel: The channel of this Host.  # noqa: E501
        :type channel: str
        :param msg_id: The msg_id of this Host.  # noqa: E501
        :type msg_id: int
        :param state: The state of this Host.  # noqa: E501
        :type state: str
        :param output: The output of this Host.  # noqa: E501
        :type output: str
        :param timestamp: The timestamp of this Host.  # noqa: E501
        :type timestamp: str
        """
        self.swagger_types = {
            'name': str,
            'channel': str,
            'msg_id': int,
            'state': str,
            'output': str,
            'timestamp': str
        }

        self.attribute_map = {
            'name': 'name',
            'channel': 'channel',
            'msg_id': 'msg_id',
            'state': 'state',
            'output': 'output',
            'timestamp': 'timestamp'
        }
        self._name = name
        self._channel = channel
        self._msg_id = msg_id
        self._state = state
        self._output = output
        self._timestamp = timestamp or datetime.utcnow().strftime(("%Y-%m-%d %H:%M:%SZ"))

    @classmethod
    def from_dict(cls, dikt) -> 'Host':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The host of this Host.  # noqa: E501
        :rtype: Host
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Host.

        Name of host to create  # noqa: E501

        :return: The name of this Host.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Host.

        Name of host to create  # noqa: E501

        :param name: The name of this Host.
        :type name: str
        """

        self._name = name

    @property
    def channel(self) -> str:
        """Gets the channel of this Host.

        Name of the channel to notify  # noqa: E501

        :return: The channel of this Host.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this Host.

        Name of the channel to notify  # noqa: E501

        :param channel: The channel of this Host.
        :type channel: str
        """

        self._channel = channel

    @property
    def msg_id(self) -> int:
        """Gets the msg_id of this Host.

        Message ID in the channel  # noqa: E501

        :return: The msg_id of this Host.
        :rtype: int
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id: int):
        """Sets the msg_id of this Host.

        Message ID in the channel  # noqa: E501

        :param msg_id: The msg_id of this Host.
        :type msg_id: int
        """

        self._msg_id = msg_id

    @property
    def state(self) -> str:
        """Gets the state of this Host.


        :return: The state of this Host.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Host.


        :param state: The state of this Host.
        :type state: str
        """
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def output(self) -> str:
        """Gets the output of this Host.

        Output of host check command  # noqa: E501

        :return: The output of this Host.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output: str):
        """Sets the output of this Host.

        Output of host check command  # noqa: E501

        :param output: The output of this Host.
        :type output: str
        """

        self._output = output

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this Host.

        Last update  # noqa: E501

        :return: The timestamp of this Host.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str=None):
        """Sets the timestamp of this Host.

        Last update  # noqa: E501

        :param timestamp: The timestamp of this Host.
        :type timestamp: str
        """

        self._timestamp = timestamp or datetime.utcnow().strftime(("%Y-%m-%d %H:%M:%SZ"))

    @property
    def all_good(self) -> bool:
        """Tests for all states UP / OK

        :rtype: bool
        """
        return self.state == 'UP'


    @property
    def picky(self) -> str:
        """Returns a formatted one-liner
        that can be chatted in keybase

        :rtype: str
        """
        msg = ""

        states = {
            'UP': 'ğŸŸ©',
            'DOWN': 'ğŸŸ¥',
        }

        if self.state in states:
            msg = f"{states[self.state]} {msg}"

        msg = f"{msg} {self.timestamp} {self.name}"
        if self.state == 'DOWN' and self.output is not None and self.output != "":
            msg = msg + f"\n`{self.output}`"

        return msg
